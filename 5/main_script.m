# Prevent Octave from thinking that this# is a function file:1;clear;function [A] = load_sparse(filename, m, n)  l = load(filename);  A = sparse(l(:,1:2)(:), fliplr(l(:,1:2))(:), 1, m, n);endfunction N = numberOfTriangles(sparse_matrix)  temp = sparse_matrix - diag(diag(sparse_matrix));   N = (trace(temp**3)/6);endfunctionarenas = "arenas-jazz/out.arenas-jazz";amazon = "com-amazon/out.com-amazon";reactome = "reactome/out.reactome";arenas_sparce = load_sparse(arenas,2742,2742);amazon_sparce = load_sparse(amazon,925872,925872);reactome_sparce = load_sparse(reactome,147547,147547);t = cputime ();arenas_tri = numberOfTriangles(arenas_sparce)amazon_tri = numberOfTriangles(amazon_sparce)reactome_tri = numberOfTriangles(reactome_sparce)printf ("needed time: %f\n", cputime () -t)# TASK 2fb = "facebook-wosn-links/out.facebook-wosn-links";fb_sparce = load_sparse(fb, 817035, 817035);function [localClusteringCoef] = localClustering(sparce_matrix)   walksOf3 = diag(sparce_matrix.'**3);   wedges = wedges(sparce_matrix);   localClusteringCoef = walksOf3./wedges';endfunction  function wedges = wedges(sparce_matrix)   degrees = sum(sparce_matrix);   wedges = degrees.*(degrees - 1);endfunction#mean local clusteringlocClustering = localClustering(fb_sparce)#global clusteringglobalClustering_v1 = nansum(locClustering)/size(locClustering)(1)facebook_tri = numberOfTriangles(fb_sparce);globalClustering_v2 = facebook_tri / nansum(wedges(fb_sparce)